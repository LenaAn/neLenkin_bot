import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import filters, ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler
from typing import Union, List

import settings

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


def build_menu(
        buttons: List[InlineKeyboardButton],
        n_cols: int,
        header_buttons: Union[InlineKeyboardButton, List[InlineKeyboardButton]] = None,
        footer_buttons: Union[InlineKeyboardButton, List[InlineKeyboardButton]] = None
) -> List[List[InlineKeyboardButton]]:
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons if isinstance(header_buttons, list) else [header_buttons])
    if footer_buttons:
        menu.append(footer_buttons if isinstance(footer_buttons, list) else [footer_buttons])
    return menu


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    button_list = [
        InlineKeyboardButton("–ö–∞–∫ –≤—Å—Ç—É–ø–∏—Ç—å?", callback_data="how_to_add"),
        InlineKeyboardButton("–•–æ—á—É —á–∏—Ç–∞—Ç—å –ö–∞–±–∞–Ω—á–∏–∫–∞!", callback_data="ddia"),
        InlineKeyboardButton("–•–æ—á—É —á–∏—Ç–∞—Ç—å SRE Book!", callback_data="sre_book")
    ]
    reply_markup = InlineKeyboardMarkup(build_menu(button_list, n_cols=1))

    club_description = \
        ("(–Ω–µ)–õ–µ–Ω–∫–∏–Ω –∫–ª—É–± @lenka_ne_club ‚Äî —ç—Ç–æ –∫–ª—É–± –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π "
         "(–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π) –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç (–≤ –ø—Ä–æ—Ç–∏–≤–æ–≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ). \n\n"
         "–û–±—Å—É–∂–¥–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, data streaming –∏ –≤—Å–µ, —á—Ç–æ —Ä—è–¥–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è. –§–æ–∫—É—Å ‚Äî –ø—Ä–∏–∫–ª–∞–¥–Ω—ã–µ "
         "–∑–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤ —Ä–∞–±–æ—Ç–µ.")
    await context.bot.send_message(chat_id=update.effective_chat.id, text=club_description, reply_markup=reply_markup)


async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button clicks"""
    query = update.callback_query
    await query.answer()  # Acknowledge the callback

    if query.data == "col1_action":
        response_text = "You clicked Column 1!"
    elif query.data == "col2_action":
        response_text = "You clicked Column 2!"
    elif query.data == "row2_action":
        response_text = "You clicked Row 2!"
    else:
        response_text = "Unknown action."

    await context.bot.send_message(response_text)


async def command_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –ª–æ–º–∞–π—Ç–µ –µ–≥–æ ü•∫.\n"
             "–ï—Å–ª–∏ –±–æ—Ç –ø–ª–æ—Ö–æ —Å–µ–±—è –≤–µ–¥–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –õ–µ–Ω–∫–µ @lenka_colenka.\n\n"
             "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
             "/start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
             "/help ‚Äî –°–ø—Ä–∞–≤–∫–∞"
    )


async def private_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("Private message handler triggered")
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –¥–≤–µ –∫–æ–º–∞–Ω–¥—ã:\n"
             "/start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
             "/help ‚Äî –°–ø—Ä–∞–≤–∫–∞"
    )


if __name__ == '__main__':
    application = ApplicationBuilder().token(settings.TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', command_help))
    application.add_handler(MessageHandler(~filters.COMMAND, private_message))

    application.add_handler(CallbackQueryHandler(button_click))

    application.run_polling()
