import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import filters, ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, CallbackQueryHandler
from typing import Union, List

import settings

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


def main_menu() -> InlineKeyboardMarkup:
    button_list = [
        InlineKeyboardButton("–ö–∞–∫ –≤—Å—Ç—É–ø–∏—Ç—å?", callback_data="how_to_join"),
        InlineKeyboardButton("–•–æ—á—É —á–∏—Ç–∞—Ç—å –ö–∞–±–∞–Ω—á–∏–∫–∞!", callback_data="ddia"),
        InlineKeyboardButton("–•–æ—á—É —á–∏—Ç–∞—Ç—å SRE Book!", callback_data="sre_book")
    ]
    menu = [button_list[i:i + 1] for i in range(0, len(button_list), 1)]
    return InlineKeyboardMarkup(menu)


def back_menu() -> InlineKeyboardMarkup:
    button_list = [
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"),
    ]
    menu = [button_list[i:i + 1] for i in range(0, len(button_list), 1)]
    return InlineKeyboardMarkup(menu)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    club_description = \
        ("(–Ω–µ)–õ–µ–Ω–∫–∏–Ω –∫–ª—É–± @lenka_ne_club ‚Äî —ç—Ç–æ –∫–ª—É–± –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π "
         "(–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π) –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç (–≤ –ø—Ä–æ—Ç–∏–≤–æ–≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ). \n\n"
         "–û–±—Å—É–∂–¥–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, data streaming –∏ –≤—Å–µ, —á—Ç–æ —Ä—è–¥–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è. –§–æ–∫—É—Å ‚Äî –ø—Ä–∏–∫–ª–∞–¥–Ω—ã–µ "
         "–∑–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤ —Ä–∞–±–æ—Ç–µ.")
    await context.bot.send_message(chat_id=update.effective_chat.id, text=club_description, reply_markup=main_menu())


async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle button clicks"""
    query = update.callback_query
    await query.answer()  # Acknowledge the callback

    if query.data == "back":
        await start(update, context)
        return

    if query.data == "how_to_join":
        response_text = ("–ü—Ä–æ—Å—Ç–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ç—Ä–æ –ø—Ä–æ —Å–µ–±—è —Å —Ö—ç—à—Ç–µ–≥–æ–º #whois ‚Äî —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è, –≥–¥–µ "
                         "—Ä–∞–±–æ—Ç–∞–µ—à—å –∏–ª–∏ —É—á–∏—à—å—Å—è, –≥–¥–µ –∂–∏–≤–µ—à—å, –≤ –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ö–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–ª—É–±–µ.\n\n"
                         "–ö–ª—É–± –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∞ –¥–æ–≤–µ—Ä–∏–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ–º —É—á–∞—Å—Ç–∏–∏ —á–ª–µ–Ω–æ–≤ –∫–ª—É–±–∞. –ö–æ–≥–¥–∞ —Ç—ã –ø–∏—à–µ—à—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ "
                         "–∏–Ω—Ç—Ä–æ –æ —Å–µ–±–µ, —Ç—ã –¥–∞–µ—à—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥—Ä—É–≥–∏–º —á–ª–µ–Ω–∞–º –∫–ª—É–±–∞ –∑–∞–¥–∞—Ç—å —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å / –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç–∞ "
                         "/ –ø–æ–∑–≤–∞—Ç—å –Ω–∞ —Å—Ö–æ–¥–∫—É.\n\n"
                         "–ò–Ω—Ç—Ä–æ —É–∂–µ —Å–æ—Å—Ç–æ—è—â–∏—Ö –≤ –∫–ª—É–±–µ –ª—é–¥–µ–π —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –ø–æ —Ö—ç—à—Ç–µ–≥—É #whois. \n\n"
                         "–í—Å—Ç—É–ø–∏—Ç—å ‚û°Ô∏è @lenka_ne_club")
    elif query.data == "row2_action":
        response_text = "You clicked Row 2!"
    else:
        response_text = "Unknown action."

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=response_text,
        reply_markup=back_menu())


async def command_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –ª–æ–º–∞–π—Ç–µ –µ–≥–æ ü•∫.\n"
             "–ï—Å–ª–∏ –±–æ—Ç –ø–ª–æ—Ö–æ —Å–µ–±—è –≤–µ–¥–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –õ–µ–Ω–∫–µ @lenka_colenka.\n\n"
             "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
             "/start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
             "/help ‚Äî –°–ø—Ä–∞–≤–∫–∞"
    )


async def private_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("Private message handler triggered")
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –¥–≤–µ –∫–æ–º–∞–Ω–¥—ã:\n"
             "/start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
             "/help ‚Äî –°–ø—Ä–∞–≤–∫–∞"
    )


if __name__ == '__main__':
    application = ApplicationBuilder().token(settings.TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', command_help))
    application.add_handler(MessageHandler(~filters.COMMAND, private_message))

    application.add_handler(CallbackQueryHandler(button_click))

    application.run_polling()
